import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { MatTab, MatTabGroup, MatTabHeader } from '@angular/material/tabs';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { PageTitleService } from 'app/core/page-title/page-title.service';
import { TaskService } from 'app/service/task/task.service';
import { SubSink } from 'subsink';
import Swal from 'sweetalert2';

@Component({
  selector: 'ms-title-task-builder-parent',
  templateUrl: './title-task-builder-parent.component.html',
  styleUrls: ['./title-task-builder-parent.component.scss'],
})
export class TitleTaskBuilderParentComponent implements OnInit, AfterViewInit, OnDestroy {
  type: string | undefined;
  taskId: string | undefined;
  titleId: string;
  isFormUnsaved: boolean = false;
  selectedTabIndex: number;
  classId
  selectedTab: number = 0;

  private subs: SubSink = new SubSink();

  @ViewChild('tabGroup', { static: false }) tabGroup: MatTabGroup;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private translate: TranslateService,
    private taskService: TaskService,
    private pageTitleService: PageTitleService
  ) {}

  ngOnInit() {
    const params = this.route.snapshot.queryParams;
    this.classId = params && params.classId ? params.classId : ''

    this.fetchMetaDataFromURL();
    this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Task Details'));
    this.subs.sink = this.translate.onLangChange.subscribe(() => {
      if (this.selectedTab === 0) {
        this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Task Details'));
      } else if (this.selectedTab === 1) {
        this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Task Parameter'));
      } else if (this.selectedTab === 2) {
        this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Notification and Messages'));
      }
    })
  }

  ngAfterViewInit() {
    this.tabGroup._handleClick = this.checkIfAnyChildrenFormInvalid.bind(this);
  }

  ngOnDestroy() {
    this.subs.unsubscribe();
  }

  //below function we check if any of the children has an unsaved forms
  checkIfAnyChildrenFormInvalid(tab: MatTab, tabHeader: MatTabHeader, idx: number) {
    if (!this.taskService.childrenFormValidationStatus) {
      return this.fireUnsavedDataWarningSwal(tab, tabHeader, idx);
    }
    return true && MatTabGroup.prototype._handleClick.apply(this.tabGroup, [tab, tabHeader, idx]);
  }

  fireUnsavedDataWarningSwal(tab?: MatTab, tabHeader?: MatTabHeader, idx?: number): Promise<boolean> {
    return Swal.fire({
      type: 'warning',
      title: this.translate.instant('TMTC_S01.TITLE'),
      text: this.translate.instant('TMTC_S01.TEXT'),
      footer: `<span style="margin-left: auto">TMTC_S01</span>`,
      confirmButtonText: this.translate.instant('TMTC_S01.BUTTON_1'),
      showCancelButton: true,
      cancelButtonText: this.translate.instant('TMTC_S01.BUTTON_2'),
      allowEscapeKey: false,
      allowOutsideClick: false,
    }).then((result) => {
      if (result.value) {
        return false;
      } else {
        this.isFormUnsaved = false;
        this.taskService.childrenFormValidationStatus = true;
        return tab && tabHeader ? true && MatTabGroup.prototype._handleClick.apply(this.tabGroup, [tab, tabHeader, idx]) : true;
      }
    });
  }

  async onLeave(event) {
    if (this.isFormUnsaved || !this.taskService.childrenFormValidationStatus) {
      const warningConfirmed = await this.fireUnsavedDataWarningSwal();
      if (warningConfirmed) this.navigateToMainTaskManagerTab();
    } else {
      this.navigateToMainTaskManagerTab();
    }
  }

  navigateToMainTaskManagerTab() {
    this.router.navigate(['../../details', this.titleId], {
      relativeTo: this.route,
      queryParams: {
        classId:this.classId,
        tab: 'titlemanagertask',
        subtasks: 'autogeneratedtask',
      },
    });
  }

  // async onSelectionTabChange(tab: MatTab, tabHeader: MatTabHeader, idx: number) {
  //   if (this.isFormUnsaved || !this.taskService.childrenFormValidationStatus) {
  //     const unsavedFormSwal = await Swal.fire({
  //       type: 'error',
  //       title: this.translate.instant('SCHOOL_S6.TITLE'),
  //       html: this.translate.instant('SCHOOL_S6.TEXT'),
  //       confirmButtonText: this.translate.instant('SCHOOL_S6.BUTTON_1'),
  //     });
  //     if (unsavedFormSwal.value) {
  //       this.taskService.childrenFormValidationStatus = true;
  //       this.isFormUnsaved = false;
  //     }
  //   } else {
  //     this.isFormUnsaved = false;
  //     this.selectedTabIndex = idx;
  //   }
  // }

  onFormValueChange(evt: boolean) {
    this.isFormUnsaved = evt;
  }

  changePageTitle(event) {
    this.selectedTab = event;
    if (event === 0) {
      this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Task Details'));
    } else if (event === 1) {
      this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Task Parameter'));
    } else if (event === 2) {
      this.pageTitleService.setTitle(this.translate.instant('Automatic Task - Notification and Messages'));
    }
  }

  fetchMetaDataFromURL() {
    this.type = this.route.snapshot.queryParams['type'];
    this.taskId = this.route.snapshot.queryParams['taskId'];
    this.titleId = this.route.snapshot.params['rncpId'];
  }
  
  saveReload(event) {
    this.router.navigateByUrl('/', {
      skipLocationChange: true,
    }).then(() => this.router.navigate(['/title-rncp/task-builder/', this.titleId], { queryParams: { type: 'edit', taskId: event.taskId, titleId: this.titleId, classId: this.classId } }));
  }
}
