import { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { RNCPTitlesService } from 'app/service/rncpTitles/rncp-titles.service';
import { TaskService } from 'app/service/task/task.service';
import { TaskDynamicMessageDialogComponent } from 'app/shared/components/task-dynamic-message-dialog/task-dynamic-message-dialog.component';
import { SubSink } from 'subsink';
import Swal from 'sweetalert2';
import { MessagesDetailsComponent } from './messages-details/messages-details.component';
import { NotificationDetailsComponent } from './notification-details/notification-details.component';
import { NotificationMessageTableComponent } from './notification-message-table/notification-message-table.component';

@Component({
  selector: 'ms-title-task-builder-task-notification-message',
  templateUrl: './title-task-builder-task-notification-message.component.html',
  styleUrls: ['./title-task-builder-task-notification-message.component.scss'],
})
export class TitleTaskBuilderTaskNotificationMessageComponent implements OnInit, OnDestroy {
  @Input() templateId;
  @Input() stepId;
  @Input() isPublished;
  @Input() isViewTask;
  @Input() classId;
  @ViewChild('notifTable', { static: false }) notifMessage: NotificationMessageTableComponent;
  @ViewChild('notifDetail', { static: false }) notifDetail: NotificationDetailsComponent;
  @ViewChild('messageDetail', { static: false }) messageDetail: MessagesDetailsComponent;
  private subs = new SubSink();
  showDetailsNotif = false;
  showDetailsMessage = false;
  refDataSelected: any;
  isWaitingForResponse = false;
  rncpId: any;
  taskId;
  dataMessagePreview: any;
  statusRejection: any;

  constructor(
    private router: Router,
    public dialog: MatDialog,
    private route: ActivatedRoute,
    private rncpTitleService: RNCPTitlesService,
    private translate: TranslateService,
    private taskService: TaskService,
  ) {}

  ngOnInit() {


    this.taskId = this.route.snapshot.queryParams['taskId'];
    this.getParamRoute();

  }

  getParamRoute() {
    if (this.route && this.route.snapshot) {
      const params = this.route.snapshot.params;

      this.rncpId = params && params.rncpId ? params.rncpId : '';

    }
  }

  getShowDetailNotifOrMessage(value) {

    if (value) {
      this.showDetailsNotif = value.notification;
      this.showDetailsMessage = value.message;
      this.refDataSelected = value.data;
    }
  }

  onSave() {
    if (this.showDetailsNotif && !this.showDetailsMessage) {
      this.saveNotifDetail();
    } else if (!this.showDetailsNotif && this.showDetailsMessage) {
      this.saveMessageDetail();
    } else {
      return;
    }
  }

  saveNotifDetail() {
    this.notifDetail.saveNotifData();
  }
  saveMessageDetail() {
    this.messageDetail.saveMessageData();
  }

  onUpdateTab($event) {
    this.showDetailsMessage = false;
    this.showDetailsNotif = false;
    this.notifMessage.reloadTable();
  }

  leave() {
    this.router.navigate(['title-rncp/details/', this.rncpId], {
      queryParams: { classId: this.classId, tab: 'titlemanagertask', subtasks: 'autogeneratedtask' },
    });
  }

  ngOnDestroy() {
    this.subs.unsubscribe();
  }

  addNotification() {
    this.isWaitingForResponse = true;
    const payload = {
      type: 'notification',
      task_builder_id: this.taskId,
    };

    this.subs.sink = this.rncpTitleService.createNotificationAndMessage(payload).subscribe(
      (resp) => {
        if (resp) {
          this.isWaitingForResponse = false;

          this.notifMessage.reloadTable();
          this.showDetailsNotif = true;
          this.showDetailsMessage = false;
          this.refDataSelected = resp;
        }
      },
      (error) => {
        this.isWaitingForResponse = false;

        this.hasNotification(error);
      },
    );
  }

  addMessage() {
    this.isWaitingForResponse = true;
    const payload = {
      type: 'message',
      task_builder_id: this.taskId,
    };

    this.subs.sink = this.rncpTitleService.createNotificationAndMessage(payload).subscribe(
      (resp) => {
        if (resp) {
          this.isWaitingForResponse = false;

          this.notifMessage.reloadTable();
          this.showDetailsNotif = false;
          this.showDetailsMessage = true;
          this.refDataSelected = resp;
        }
      },
      (error) => {
        this.isWaitingForResponse = false;

        this.hasMessage(error);
      },
    );
  }

  hasNotification(err) {

    if (err['message'] === 'GraphQL error: Step Notification already exist') {
      Swal.fire({
        type: 'info',
        title: this.translate.instant('Sorry'),
        text: this.translate.instant('The notification for this step has been created, user can only add 1 notification for 1 step'),
        confirmButtonText: this.translate.instant('DISCONNECT_SCHOOL.BUTTON3'),
      });
    }
  }

  hasMessage(err) {

    if (err['message'] === 'GraphQL error: Step Message already exist') {
      Swal.fire({
        type: 'info',
        title: this.translate.instant('Sorry'),
        text: this.translate.instant('The message for this step has been created, user can only add 1 message for 1 step'),
        confirmButtonText: this.translate.instant('DISCONNECT_SCHOOL.BUTTON3'),
      });
    }
  }

  previewNotification() {
    Swal.fire({
      type: 'warning',
      allowEnterKey: false,
      allowEscapeKey: false,
      showCancelButton: true,
      allowOutsideClick: false,
      html: this.translate.instant('Notif_S7.TEXT', { templateName: this.refDataSelected.ref_id }),
      title: this.translate.instant('Notif_S7.TITLE'),
      footer: `<span style="margin-left: auto">Notif_S7</span>`,
      cancelButtonText: this.translate.instant('Notif_S7.BUTTON2'),
      confirmButtonText: this.translate.instant('Notif_S7.BUTTON1'),
    }).then((confirm) => {

      if (confirm.value) {
        this.subs.sink = this.taskService.SendPreviewNotification(this.taskId, this.translate.currentLang).subscribe((resp) => {
          Swal.fire({
            type: 'success',
            title: 'Bravo!',
            confirmButtonText: 'OK',
            allowEnterKey: false,
            allowEscapeKey: false,
            allowOutsideClick: false,
          }).then(() => {});
        });
      }
    });
    // ..
  }

  getDataMessage(event) {
    this.dataMessagePreview = event;

  }

  previewMessage() {

    this.subs.sink = this.taskService.getTaskMessage(this.taskId, true, null).subscribe((ressp) => {
      if (ressp) {
        this.subs.sink = this.dialog
          .open(TaskDynamicMessageDialogComponent, {
            width: '600px',
            minHeight: '100px',
            panelClass: 'certification-rule-pop-up',
            disableClose: true,
            data: {
              task_builder_id: this.taskId,
              isPreview: true,
              dataPreview: this.dataMessagePreview,
              trigger_condition: null,
              task_id: null,
              dataFrom: 'previewMessage',
            },
          })
          .afterClosed()
          .subscribe((resp) => {});
      }
    });
  }
}
